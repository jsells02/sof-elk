filter {
  if [type] == "windows" {
#    json {
#      source => "message"
#    }
    date {
      match => ["EventTime", "YYYY-MM-dd HH:mm:ss"]
      remove_field => [ "EventTime" ]
    }
    if [EventID] == 4634 {
      mutate {
        add_tag => [ "logoff" ]
      }
    }
    if [EventID] in [ 528, 540, 552, 682, 4624, 4648, 4778 ] {
      mutate {
        add_tag => [ "logon" , "alert_data" ]
      }
    }
    if [EventID] in [ 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 4625, 4771 ] {
      mutate {
        add_tag => [ "logon_failure", "alert_data" ]
      }
    }
    # Critical event IDs to monitor
    if [EventID] in [ 1056, 1102, 2003, 2005, 4720, 4722, 4724, 4732, 4738,7030, 8003, 8004, 8006, 8007 ] {
      mutate {
        add_tag => [ "alert_data" ]
      }
    }
    # Critical event IDs to monitor
    if [EventID] in [ 4688, 4690, 4689, 5152, 5447 ] or
       [Channel] == "Microsoft-Windows-Known Folders API Service" or
       ([EventID] == 3 and ([SourceIp] =~ "255$" or [DestinationIP =~ "255$"])) {
      mutate {
        add_tag => [ "dropcandidate" ]
      }
    }
    # Whitelist/Blacklist check
    if [EventID] == 7045 {
      translate {
        source => "ServiceName"
        target => "ServiceCheck"
        dictionary_path => "/usr/local/sof-elk/lib/dictionaries/service_svc2listtype.yaml"
        fallback => "new_service"
      }
    }
    if [ServiceCheck] == "whitelist" {
      mutate {
        remove_field => [ "ServiceCheck" ]
        add_tag => [ "whitelist" ]
      }
    }
    if [ServiceCheck] == "blacklist" {
      mutate {
        remove_field => [ "ServiceCheck" ]
        add_tag => [ "blacklist" ]
      }
    }
    if [EventID] == 5158 {
      if [Application] == "System" or
         [Application] =~ "\\windows\\system32\\spoolsv\.exe" or
         [Application] =~ "\\windows\\system32\\wbem\\wmiprvse\.exe" or
         [Application] =~ "mcafee" or
         [Application] =~ "carestream" or
         [Application] =~ "Softdent" or
         [Application] =~ "\\windows\\system32\\lsass\.exe$" or
         [Application] =~ "\\windows\\system32\\svchost\.exe$" or
         [Application] =~ "\\windows\\system32\\dfsrs\.exe$" {
        mutate {
          add_tag => [ "dropcandidate" ]
        }
      }
    }
    if [ProcessName] == "C:\\Windows\\System32\\wbem\\WmiPrvSE\.exe" and [SubjectUserName] == "SolarwindsHO" {
      mutate {
        add_tag => [ "dropcandidate" ]
      }
    }
    if [EventID] == 861 and [AccountName] == "ntp" { 
      mutate {
        add_tag => [ "dropcandidate" ]
      }
    }

    mutate {
      rename => {
        "AccountName" => "user"
        "AccountType" => "account_type"
        "ActivityID" => "activity_id"
        "Category" => "category"
        "ClientAddress" => "[client][ip]"
        "Channel" => "channel"
        "DCIPAddress" => "[domain_controller][ip]"
        "DCName" => "domain_controller_name"
        "EventID" => "event_id"
        "EventReceivedTime" => "event_received_time"
        "EventType" => "event_type"
        "GatewayIPAddress" => "[gateway][ip]"
        "IPAddress" => "[client][ip]"
        "Ipaddress" => "[client][ip]"
        "IpAddress" => "[client][ip]"
        "IPPort" => "[source][port]"
        "OpcodeValue" => "opcode_value"
        "PreAuthType" => "preauthentication_type"
        "PrincipleSAMName" => "user"
        "ProcessID" => "process_id"
        "ProviderGUID" => "providerguid"
        "RecordNumber" => "record_number"
        "RemoteAddress" => "[destination][ip]"
        "ServiceName" => "service_name"
        "ServiceID" => "service_id"
        "SeverityValue" => "severity_value"
        "SourceAddress" => "[client][ip]"
        "SourceModuleName" => "source_module_name"
        "SourceModuleType" => "source_module_type"
        "SourceName" => "source_name"
        "SubjectUserName" => "user"
        "TaskName" => "task_name"
        "TargetDomainName" => "target_domain_name"
        "TargetUserName" => "user"
        "ThreadID" => "thread_id"
        "User_ID" => "user"
        "UserID" => "user"
        "username" => "user"
      }
    }
    # For any accounts that are service accounts or special accounts add the tag of service_account
    # This example applies the tag to any username that starts with SVC_.  If you use a different
    # standard change this.
    if [user] =~ "^DWM-*" or [user] =~ "^SVC_*" or [user] in [ "SYSTEM", "NETWORK SERVICE", "LOCAL SERVICE" ] {
      mutate {
        add_tag => [ "service_account" ]
      }
    }
    # This looks for events that are typically noisy but may be of use for deep dive investigations
    # A tag of noise is added to quickly filter out noise
    if [event_id] == 7036 or [source_name] == "Desktop Window Manager" or [category] in [ "Engine Lifecycle", "Provider Lifecycle" ] {
      mutate {
        add_tag => [ "noise" ]
      }
    }
    #Identify machine accounts
    if [user] =~ /\$/ {
      mutate {
        add_tag => [ "machine", "noise" ]
      }
    }
    # Lower case all field names
    ruby {
      code => "
        event_hash = event.to_hash
        new_event = {}
        event_hash.keys.each do |key|
        new_event[key.downcase] = event[key]
        end
        event.instance_variable_set(:@data, new_event)"
    }
  }
}
