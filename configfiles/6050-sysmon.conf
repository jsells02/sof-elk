# SOF-ELKÂ® Configuration File
# (C)2024 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for sysmon messages
# It was initially developed to support logs from sysmon for linux via syslog

# <Event><System><Provider Name="Linux-Sysmon" Guid="{ff032593-a8d3-4f13-b0d6-01fc615a0f97}"/><EventID>3</EventID><Version>5</Version><Level>4</Level><Task>3</Task><Opcode>0</Opcode><Keywords>0x8000000000000000</Keywords><TimeCreated SystemTime="2023-03-17T07:00:24.306312000Z"/><EventRecordID>28253492</EventRecordID><Correlation/><Execution ProcessID="834" ThreadID="834"/><Channel>Linux-Sysmon/Operational</Channel><Computer>starkskunk5</Computer><Security UserId="0"/></System><EventData><Data Name="RuleName">-</Data><Data Name="UtcTime">2023-03-17 07:00:24.309</Data><Data Name="ProcessGuid">{ec2ee89f-0ff1-6414-6d55-7c13e9550000}</Data><Data Name="ProcessId">785807</Data><Data Name="Image">/usr/usr/sbin/logrotate</Data><Data Name="User">root</Data><Data Name="Protocol">udp</Data><Data Name="Initiated">true</Data><Data Name="SourceIsIpv6">false</Data><Data Name="SourceIp">10.130.9.15</Data><Data Name="SourceHostname">-</Data><Data Name="SourcePort">59672</Data><Data Name="SourcePortName">-</Data><Data Name="DestinationIsIpv6">false</Data><Data Name="DestinationIp">10.130.8.2</Data><Data Name="DestinationHostname">-</Data><Data Name="DestinationPort">53</Data><Data Name="DestinationPortName">-</Data></EventData></Event>

filter {
  if [labels][type] == "syslog" and [log][syslog][appname] == "sysmon" {

    # parse the xml into the "sysmon" object
    xml {
      source => "message"
      target => "sysmon"
      force_content => false
      force_array => false
    }

    if [sysmon][System][TimeCreated][SystemTime] {
      date {
        match => [ "[sysmon][System][TimeCreated][SystemTime]", "ISO8601" ]
      }
    }
    mutate {
      remove_field => [ "[sysmon][System][TimeCreated][SystemTime]" ]
    }

    if [sysmon][System][EventID] {
      translate {
        dictionary_path => "/usr/local/sof-elk/lib/dictionaries/eventid2desc.yaml"
        source => "[sysmon][System][EventID]"
        target => "[sysmon][System][EventIDDescription]"
      }
    }

    if [sysmon][EventData][Data] {
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/split_kv_to_fields.rb"
        script_params => {
          "source_field" => "[sysmon][EventData][Data]"
          "destination_field" => "[sysmon][EventData]"
          "key_field" => "Name"
          "val_field" => "content"
        }
      }
      mutate {
        remove_field => [ "[sysmon][EventData][Data]" ]
      }
    }

    if [sysmon][System][Provider][Guid] {
      mutate {
        gsub => [ "[sysmon][System][Provider][Guid]", "[{}]", "" ]
      }
    }
    if [sysmon][EventData][ProcessGuid] {
      mutate {
        gsub => [ "[sysmon][EventData][ProcessGuid]", "[{}]", "" ]
      }
    }

    # populate message field??
    # remove empty objects: System.TimeCreated, ???

    # rename common fields to standard names
    mutate {
      # overwrite the syslog hostname so we get the hostname of the actual source system instead
      # I am quite sure the log.syslog.procid override is correct, but I'm leaving this note here for further confirmation before declaring it final
      rename => {
        "[sysmon][EventData][SourceIp]" => "[source][ip]"
        "[sysmon][EventData][SourcePort]" => "[source][port]"
        "[sysmon][EventData][DestinationIp]" => "[destination][ip]"
        "[sysmon][EventData][DestinationPort]" => "[destination][port]"
      }
      replace => {
        "[log][syslog][procid]" => "%{[sysmon][EventData][ProcessId]}"
        "[log][syslog][hostname]" => "%{[sysmon][System][Computer]}"
        "[log][syslog][appname]" => "%{[sysmon][EventData][Image]}"
      }
    }
    mutate {
      remove_field => [
        "[sysmon][EventData][ProcessId]",
        "[sysmon][System][Computer]",
        "[sysmon][EventData][Image]"
      ]
    }

    # recast known fields to proper types
    mutate {
      convert => {
        "[log][syslog][procid]" => "integer"
        "[sysmon][System][EventID]" => "integer"
        "[sysmon][System][Level]" => "integer"
        "[sysmon][System][Opcode]" => "integer"
        "[sysmon][System][Task]" => "integer"
        "[sysmon][System][Security][UserId]" => "integer"
        "[sysmon][System][Version]" => "integer"
        "[sysmon][System][EventRecordID]" => "integer"
        "[sysmon][System][Execution][ProcessID]" => "integer"
        "[sysmon][System][Execution][ThreadID]" => "integer"

        "[sysmon][EventData][Initiated]" => "boolean"
        "[sysmon][EventData][SourceIsIpv6]" => "boolean"
        "[sysmon][EventData][DestinationIsIpv6]" => "boolean"
      }
    }

    # build a new "message" field
    mutate {
      replace => { "message" => "sysmon:%{[sysmon][System][EventIDDescription]}" }
    }
    # tailor the new "message" field to include context depending on the EventID
    if [sysmon][System][EventID] == 11 or [sysmon][System][EventID] == 23 {
      ## "FileCreate" and "FileDelete archived"
      mutate {
        replace => { "message" => "%{message} (%{[sysmon][EventData][TargetFilename]})" }
      }
    } else if [sysmon][System][EventID] == 3 {
      ## "Network Connection"
      mutate {
        replace => { "message" => "%{message} (%{[source][ip]}:%{[source][port]} -> %{[destination][ip]}:%{[destination][port]})"}
      }
    }

    mutate {
      add_tag => [ "parse_done" ]
    }

  }
}
